{"ast":null,"code":"var _jsxFileName = \"/Users/andresmartin/Documents/Coding/mad-men-blog/pages/cast/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Person = props => __jsx(Layout, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }\n}, \"Season \", props.personData.name), __jsx(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }\n}, props.completeSeason.map(episode => __jsx(\"li\", {\n  key: episode.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 17\n  }\n}, __jsx(Link, {\n  href: \"/seasons/episode/[id]\",\n  as: `/seasons/episode/${episode.id}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 21\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 25\n  }\n}, \"Episode \", episode.number, \"........\", episode.name))))));\n\nPerson.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const [personData, actorData] = await Promise.all([fetch(`https://api.tvmaze.com/people/${id}`).then(r => r.json()), fetch(`https://api.tvmaze.com/people/${id}/castcredits?embed=show`).then(r => r.json())]);\n  return {\n    personData,\n    actorData\n  };\n};\n\nexport default Person;","map":{"version":3,"sources":["/Users/andresmartin/Documents/Coding/mad-men-blog/pages/cast/[id].js"],"names":["Layout","fetch","Link","Person","props","personData","name","completeSeason","map","episode","id","number","getInitialProps","context","query","actorData","Promise","all","then","r","json"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAYA,KAAK,CAACC,UAAN,CAAiBC,IAA7B,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKF,KAAK,CAACG,cAAN,CAAqBC,GAArB,CAAyBC,OAAO,IAC7B;AAAI,EAAA,GAAG,EAAEA,OAAO,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,uBAAX;AAAmC,EAAA,EAAE,EAAG,oBAAmBD,OAAO,CAACC,EAAG,EAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYD,OAAO,CAACE,MAApB,cAAoCF,OAAO,CAACH,IAA5C,CADJ,CADJ,CADH,CADL,CAFJ,CADJ;;AAeAH,MAAM,CAACS,eAAP,GAAyB,gBAAgBC,OAAhB,EAAyB;AAC9C,QAAM;AAAEH,IAAAA;AAAF,MAASG,OAAO,CAACC,KAAvB;AAEA,QAAM,CAACT,UAAD,EAAaU,SAAb,IAA0B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC9ChB,KAAK,CAAE,iCAAgCS,EAAG,EAArC,CAAL,CAA6CQ,IAA7C,CAAkDC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAAvD,CAD8C,EAE9CnB,KAAK,CAAE,iCAAgCS,EAAG,yBAArC,CAAL,CAAoEQ,IAApE,CAAyEC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAA9E,CAF8C,CAAZ,CAAtC;AAKA,SAAO;AACHf,IAAAA,UADG;AACSU,IAAAA;AADT,GAAP;AAGH,CAXD;;AAaA,eAAeZ,MAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst Person = props => (\n    <Layout>\n        <h1>Season {props.personData.name}</h1>\n        <ul>\n            {props.completeSeason.map(episode => (\n                <li key={episode.id}>\n                    <Link href=\"/seasons/episode/[id]\" as={`/seasons/episode/${episode.id}`}>\n                        <a>Episode {episode.number}........{episode.name}</a>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    </Layout>\n);\n\nPerson.getInitialProps = async function (context) {\n    const { id } = context.query;\n\n    const [personData, actorData] = await Promise.all([\n        fetch(`https://api.tvmaze.com/people/${id}`).then(r => r.json()),\n        fetch(`https://api.tvmaze.com/people/${id}/castcredits?embed=show`).then(r => r.json()),\n    ])\n\n    return {\n        personData, actorData\n    };\n};\n\nexport default Person;"]},"metadata":{},"sourceType":"module"}