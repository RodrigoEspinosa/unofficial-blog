{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nvar Person = function Person(props) {\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"jsx-862534036\" + \" \" + \"container\"\n  }, __jsx(\"div\", {\n    className: \"jsx-862534036\" + \" \" + \"personInfo\"\n  }, __jsx(\"h1\", {\n    className: \"jsx-862534036\"\n  }, props.personData.name)), __jsx(\"div\", {\n    className: \"jsx-862534036\" + \" \" + \"img\"\n  }, props.personData.image ? __jsx(\"img\", {\n    src: props.personData.image.original,\n    className: \"jsx-862534036\"\n  }) : __jsx(\"noimg\", {\n    className: \"jsx-862534036\"\n  })), __jsx(\"ul\", {\n    className: \"jsx-862534036\" + \" \" + \"list\"\n  }, props.crewData.map(function (show) {\n    return __jsx(\"li\", {\n      key: show.id,\n      className: \"jsx-862534036\"\n    }, __jsx(\"div\", {\n      className: \"jsx-862534036\" + \" \" + \"showInfo\"\n    }, __jsx(\"p\", {\n      className: \"jsx-862534036\"\n    }, show.type, \": \", show._embedded.show.name, \" (\", show._embedded.show.network ? show._embedded.show.network.name : show._embedded.show.webChannel.name, \")\")), __jsx(\"div\", {\n      className: \"jsx-862534036\" + \" \" + \"showImg\"\n    }, show._embedded.show.image ? __jsx(\"img\", {\n      src: show._embedded.show.image.original,\n      className: \"jsx-862534036\"\n    }) : __jsx(\"noimg\", {\n      className: \"jsx-862534036\"\n    })));\n  }))), __jsx(_JSXStyle, {\n    id: \"862534036\"\n  }, [\".container.jsx-862534036{padding-top:25px;-webkit-box-pack:stretch;-webkit-justify-content:stretch;-ms-flex-pack:stretch;justify-content:stretch;-webkit-align-content:stretch;-ms-flex-line-pack:stretch;align-content:stretch;display:grid;grid-template-columns:20vw 20vw 20vw 20vw;grid-template-rows:35vh 40vh 20vh 19vh;margin-left:8%;margin-right:6%;}\", \".personInfo.jsx-862534036{grid-column-start:1;grid-column-end:3;grid-row-start:1;grid-row-end:2;padding:10%;width:40vw;float:left;padding:15%;}\", \".img.jsx-862534036{grid-column-start:3;grid-column-end:5;grid-row-start:1;grid-row-end:2;justify-self:right;margin-top:20px;}\", \".img.jsx-862534036>img.jsx-862534036{object-fit:cover;max-height:100%;}\", \".list.jsx-862534036{grid-column-start:1;grid-column-end:5;grid-row-start:2;grid-row-end:5;}\", \"li.jsx-862534036{list-style-type:none;height:30vh;padding-left:2vw;border:1px solid #DDD;}\", \".showImg.jsx-862534036>img.jsx-862534036{object-fit:cover;max-height:30vh;float:right;}\", \".showInfo.jsx-862534036{float:left;width:50vw;padding-top:5vh;padding-left:4vw;font-size:25px;}\", \"@media (max-width:800px){.characterImg.jsx-862534036>img.jsx-862534036{object-fit:cover;max-height:5vh;}.container.jsx-862534036{padding-top:15px;-webkit-box-pack:stretch;-webkit-justify-content:stretch;-ms-flex-pack:stretch;justify-content:stretch;-webkit-align-content:stretch;-ms-flex-line-pack:stretch;align-content:stretch;display:grid;grid-template-columns:20vw 20vw 20vw 20vw;grid-template-rows:18vh 25vh 20vh 19vh;margin-left:9%;margin-right:9%;font-size:7px;}.img.jsx-862534036{grid-column-start:1;grid-column-end:5;grid-row-start:1;grid-row-end:2;margin-right:4vw;}.list.jsx-862534036{grid-column-start:1;grid-column-end:5;grid-row-start:2;grid-row-end:5;margin-left:-10vw;}li.jsx-862534036{list-style-type:none;height:20vh;text-align:left;margin-bottom:25px;}.showInfo.jsx-862534036{width:20vh;font-size:10px;}.showImg.jsx-862534036>img.jsx-862534036{max-height:20vh;}.personInfo.jsx-862534036{padding:35%;}}\"]));\n};\n\nPerson.getInitialProps = function _callee(context) {\n  var id, _await$Promise$all, _await$Promise$all2, personData, crewData;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all([fetch(\"https://api.tvmaze.com/people/\".concat(id)).then(function (r) {\n            return r.json();\n          }), fetch(\"https://api.tvmaze.com/people/\".concat(id, \"/crewcredits?embed=show\")).then(function (r) {\n            return r.json();\n          })]));\n\n        case 3:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n          personData = _await$Promise$all2[0];\n          crewData = _await$Promise$all2[1];\n          return _context.abrupt(\"return\", {\n            personData: personData,\n            crewData: crewData\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Person;","map":null,"metadata":{},"sourceType":"module"}