{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/andresmartin/Documents/Coding/mad-men-blog/pages/seasons/[id].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\n\nvar Episodes = function Episodes(props) {\n  var router = useRouter();\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, router.query.id), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, props.seasons.map(function (season) {\n    return __jsx(\"li\", {\n      key: season.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 25\n      }\n    }, season.premiereDate ? __jsx(Link, {\n      href: \"/season/[id]\",\n      as: \"/season/\".concat(season.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 52\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 33\n      }\n    }, \"Season \", season.number, \" - \", season.premiereDate, \" / \", season.endDate, \" \")) : __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 33\n      }\n    }, \"Season \", season.number)));\n  })));\n};\n\nEpisodes.getInitialProps = function _callee(context) {\n  var id, _await$Promise$all, _await$Promise$all2, title, seasons;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all([fetch(\"https://api.tvmaze.com/shows/\".concat(id)).then(function (r) {\n            return r.json().name;\n          }), fetch(\"https://api.tvmaze.com/shows/\".concat(id, \"/seasons\")).then(function (r) {\n            return r.json().map(function (entry) {\n              return entry;\n            });\n          })]));\n\n        case 3:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n          title = _await$Promise$all2[0];\n          seasons = _await$Promise$all2[1];\n          return _context.abrupt(\"return\", {\n            seasons: data.map(function (entry) {\n              return entry;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Episodes;","map":{"version":3,"sources":["/Users/andresmartin/Documents/Coding/mad-men-blog/pages/seasons/[id].js"],"names":["Link","Layout","fetch","useRouter","Episodes","props","router","query","id","seasons","map","season","premiereDate","number","endDate","getInitialProps","context","Promise","all","then","r","json","name","entry","title","data"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AAEtB,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,MAAM,CAACC,KAAP,CAAaC,EAAlB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KAAK,CAACI,OAAN,CAAcC,GAAd,CAAkB,UAAAC,MAAM;AAAA,WACrB;AAAI,MAAA,GAAG,EAAEA,MAAM,CAACH,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKG,MAAM,CAACC,YAAP,GAAsB,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAA0B,MAAA,EAAE,oBAAaD,MAAM,CAACH,EAApB,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWG,MAAM,CAACE,MAAlB,SAA6BF,MAAM,CAACC,YAApC,SAAqDD,MAAM,CAACG,OAA5D,MADmB,CAAtB,GAKG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWH,MAAM,CAACE,MAAlB,CANR,CADJ,CADqB;AAAA,GAAxB,CADL,CAFJ,CADJ;AAsBH,CAzBD;;AA2BAT,QAAQ,CAACW,eAAT,GAA2B,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfR,UAAAA,EADe,GACRQ,OAAO,CAACT,KADA,CACfC,EADe;AAAA;AAAA,2CAEQS,OAAO,CAACC,GAAR,CAAY,CACvChB,KAAK,wCAAiCM,EAAjC,EAAL,CAA4CW,IAA5C,CAAiD,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,GAASC,IAAb;AAAA,WAAlD,CADuC,EAEvCpB,KAAK,wCAAiCM,EAAjC,cAAL,CAAoDW,IAApD,CAAyD,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,GAASX,GAAT,CAAa,UAAAa,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aAAlB,CAAJ;AAAA,WAA1D,CAFuC,CAAZ,CAFR;;AAAA;AAAA;AAAA;AAEhBC,UAAAA,KAFgB;AAETf,UAAAA,OAFS;AAAA,2CAOhB;AACHA,YAAAA,OAAO,EAAEgB,IAAI,CAACf,GAAL,CAAS,UAAAa,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aAAd;AADN,WAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAYA,eAAenB,QAAf","sourcesContent":["import Link from 'next/link';\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router'\n\nconst Episodes = props => {\n\n    const router = useRouter()\n    return (\n        <Layout>\n            <h1>{router.query.id}</h1>\n            <ul>\n                {props.seasons.map(season => (\n                    <li key={season.id} >\n                        <div>\n                            {season.premiereDate ? <Link href=\"/season/[id]\" as={`/season/${season.id}`}>\n                                <a>Season {season.number} - {season.premiereDate} / {season.endDate} </a>\n\n                            </Link>\n                                :\n                                <p>Season {season.number}</p>\n                            }\n                        </div>\n\n                    </li>\n                ))}\n            </ul>\n\n        </Layout>\n    )\n};\n\nEpisodes.getInitialProps = async function (context) {\n    const { id } = context.query\n    const [title, seasons] = await Promise.all([\n        fetch(`https://api.tvmaze.com/shows/${id}`).then(r => r.json().name),\n        fetch(`https://api.tvmaze.com/shows/${id}/seasons`).then(r => r.json().map(entry => entry)),\n\n    ])\n    return {\n        seasons: data.map(entry => entry)\n    };\n};\n\nexport default Episodes"]},"metadata":{},"sourceType":"module"}