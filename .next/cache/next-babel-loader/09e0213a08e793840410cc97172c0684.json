{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/andresmartin/Documents/Coding/mad-men-blog/pages/seasons/[id].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\n\nvar Episodes = function Episodes(props) {\n  var router = useRouter();\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, props.name), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, props.seasons.map(function (season) {\n    return __jsx(\"li\", {\n      key: season.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 25\n      }\n    }, season.premiereDate ? __jsx(Link, {\n      href: \"/season/[id]\",\n      as: \"/season/\".concat(season.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 52\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 33\n      }\n    }, \"Season \", season.number, \" - \", season.premiereDate, \" / \", season.endDate, \" \")) : __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 33\n      }\n    }, \"Season \", season.number)));\n  })));\n};\n\nEpisodes.getInitialProps = function _callee(context) {\n  var id, _await$Promise$all, _await$Promise$all2, name, seasons;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all([fetch(\"https://api.tvmaze.com/shows/\".concat(id)).then(function (r) {\n            return r.json().name;\n          }), fetch(\"https://api.tvmaze.com/shows/\".concat(id, \"/seasons\")).then(function (r) {\n            return r.json().map(function (entry) {\n              return entry;\n            });\n          }), console.log(seasons)]));\n\n        case 3:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n          name = _await$Promise$all2[0];\n          seasons = _await$Promise$all2[1];\n          return _context.abrupt(\"return\", {\n            name: name,\n            seasons: seasons\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Episodes;","map":{"version":3,"sources":["/Users/andresmartin/Documents/Coding/mad-men-blog/pages/seasons/[id].js"],"names":["Link","Layout","fetch","useRouter","Episodes","props","router","name","seasons","map","season","id","premiereDate","number","endDate","getInitialProps","context","query","Promise","all","then","r","json","entry","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AAEtB,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,KAAK,CAACE,IAAX,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,KAAK,CAACG,OAAN,CAAcC,GAAd,CAAkB,UAAAC,MAAM;AAAA,WACrB;AAAI,MAAA,GAAG,EAAEA,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,MAAM,CAACE,YAAP,GAAsB,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAA0B,MAAA,EAAE,oBAAaF,MAAM,CAACC,EAApB,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWD,MAAM,CAACG,MAAlB,SAA6BH,MAAM,CAACE,YAApC,SAAqDF,MAAM,CAACI,OAA5D,MADmB,CAAtB,GAKG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWJ,MAAM,CAACG,MAAlB,CANR,CADJ,CADqB;AAAA,GAAxB,CADL,CAFJ,CADJ;AAsBH,CAzBD;;AA2BAT,QAAQ,CAACW,eAAT,GAA2B,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfL,UAAAA,EADe,GACRK,OAAO,CAACC,KADA,CACfN,EADe;AAAA;AAAA,2CAEOO,OAAO,CAACC,GAAR,CAAY,CACtCjB,KAAK,wCAAiCS,EAAjC,EAAL,CAA4CS,IAA5C,CAAiD,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,GAASf,IAAb;AAAA,WAAlD,CADsC,EAEtCL,KAAK,wCAAiCS,EAAjC,cAAL,CAAoDS,IAApD,CAAyD,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,GAASb,GAAT,CAAa,UAAAc,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aAAlB,CAAJ;AAAA,WAA1D,CAFsC,EAGtCC,OAAO,CAACC,GAAR,CAAYjB,OAAZ,CAHsC,CAAZ,CAFP;;AAAA;AAAA;AAAA;AAEhBD,UAAAA,IAFgB;AAEVC,UAAAA,OAFU;AAAA,2CAOhB;AACHD,YAAAA,IAAI,EAAJA,IADG;AACGC,YAAAA,OAAO,EAAPA;AADH,WAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAaA,eAAeJ,QAAf","sourcesContent":["import Link from 'next/link';\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router'\n\nconst Episodes = props => {\n\n    const router = useRouter()\n    return (\n        <Layout>\n            <h1>{props.name}</h1>\n            <ul>\n                {props.seasons.map(season => (\n                    <li key={season.id} >\n                        <div>\n                            {season.premiereDate ? <Link href=\"/season/[id]\" as={`/season/${season.id}`}>\n                                <a>Season {season.number} - {season.premiereDate} / {season.endDate} </a>\n\n                            </Link>\n                                :\n                                <p>Season {season.number}</p>\n                            }\n                        </div>\n\n                    </li>\n                ))}\n            </ul>\n\n        </Layout>\n    )\n};\n\nEpisodes.getInitialProps = async function (context) {\n    const { id } = context.query\n    const [name, seasons] = await Promise.all([\n        fetch(`https://api.tvmaze.com/shows/${id}`).then(r => r.json().name),\n        fetch(`https://api.tvmaze.com/shows/${id}/seasons`).then(r => r.json().map(entry => entry)),\n        console.log(seasons)\n    ])\n    return {\n        name, seasons\n\n    };\n};\n\nexport default Episodes"]},"metadata":{},"sourceType":"module"}